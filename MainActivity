package app.ram.overlay;

import android.Manifest;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.hardware.Camera;
import android.os.AsyncTask;
import android.support.v4.app.ActivityCompat;
import android.support.v4.app.NotificationCompat;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.SeekBar;
import android.widget.TextView;
import android.widget.Toast;


public class MainActivity extends AppCompatActivity {

    SeekBar R_SeekBar, B_SeekBar, G_SeekBar, A_SeekBar;
    TextView R_textView, B_textView, G_textView, A_textView;
    Intent intent, noti_intent_stop, noti_intent_start, to_main, cameraIntent, notifyIntent;
    PendingIntent pendingIntent1, pendingIntent2, pendingIntent3;
    int red, blue, green, alpha, color;
    public Camera camera;
    public int cameraId = -1;
    Bitmap myBitmap;
    int brightness = 0;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        //moveTaskToBack(true);

        int c = 0;

        if (this.getIntent().hasExtra("from")) {
            Log.i("Checking flow", "came here from notification!");
            String s = this.getIntent().getExtras().getString("from");
            if (s.equals("notification")) {
                c = 1;
            }
        }

        if (c == 0) {
            moveTaskToBack(true);
        }

        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        Log.i("Checking flow", "In Main OnCreate!");

        if (!getPackageManager()
                .hasSystemFeature(PackageManager.FEATURE_CAMERA)) {
            Toast.makeText(this, "No camera on this device", Toast.LENGTH_LONG)
                    .show();
        } else {
            cameraId = findFrontFacingCamera();
            if (cameraId < 0) {
                Toast.makeText(this, "No front facing camera found.",
                        Toast.LENGTH_LONG).show();
            }
        }

        SharedPreferences.Editor editor = getSharedPreferences("camera_id_pref", MODE_PRIVATE).edit();
        editor.putInt("camera_id", cameraId);
        editor.apply();

        R_SeekBar = findViewById(R.id.R_seekBar);
        B_SeekBar = findViewById(R.id.B_seekBar);
        G_SeekBar = findViewById(R.id.G_seekBar);
        A_SeekBar = findViewById(R.id.A_seekBar);
        R_textView = findViewById(R.id.R_textView);
        B_textView = findViewById(R.id.B_textView);
        G_textView = findViewById(R.id.G_textView);
        A_textView = findViewById(R.id.A_textView);

        R_textView.setText(String.valueOf(R_SeekBar.getProgress()));
        B_textView.setText(String.valueOf(B_SeekBar.getProgress()));
        G_textView.setText(String.valueOf(G_SeekBar.getProgress()));
        A_textView.setText(String.valueOf(A_SeekBar.getProgress()));

        red = R_SeekBar.getProgress();
        blue = B_SeekBar.getProgress();
        green = G_SeekBar.getProgress();
        alpha = A_SeekBar.getProgress();

        R_SeekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {

            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                R_textView.setText(String.valueOf(progress));
            }

            public void onStartTrackingTouch(SeekBar seekBar) {
                // TODO Auto-generated method stub
            }

            public void onStopTrackingTouch(SeekBar seekBar) {
                red = seekBar.getProgress();
            }
        });

        B_SeekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {

            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                B_textView.setText(String.valueOf(progress));
            }

            public void onStartTrackingTouch(SeekBar seekBar) {
                // TODO Auto-generated method stub
            }

            public void onStopTrackingTouch(SeekBar seekBar) {
                blue = seekBar.getProgress();
            }
        });

        G_SeekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {

            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                G_textView.setText(String.valueOf(progress));
            }

            public void onStartTrackingTouch(SeekBar seekBar) {
                // TODO Auto-generated method stub
            }

            public void onStopTrackingTouch(SeekBar seekBar) {
                green = seekBar.getProgress();
            }
        });

        A_SeekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {

            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                A_textView.setText(String.valueOf(progress));
            }

            public void onStartTrackingTouch(SeekBar seekBar) {
                // TODO Auto-generated method stub
            }

            public void onStopTrackingTouch(SeekBar seekBar) {
                alpha = seekBar.getProgress();
            }
        });
        cameraIntent = new Intent(this, MyCameraService.class);
        cameraIntent.putExtra("cameraID", cameraId);
        notifyIntent = new Intent(this, MyNotifyService.class);
        intent = new Intent(this, OverlayService.class);
        noti_intent_stop = new Intent(this, OverlayService.class);
        noti_intent_start = new Intent(this, OverlayService.class);
        to_main = new Intent(this, MainActivity.class);
        to_main.putExtra("from", "notification");

        if (c != 1) {
            Log.i("Checking flow", "Optimising!");
            Optimise_screen(findViewById(R.id.optimise));
        }

        //Optimise_screen(findViewById(R.id.optimise));
    }

    public void Set_color () {
        color = Color.argb(alpha, red, green, blue);
    }

    public void Set_overlay (View view) {
        Set_color();
        intent.putExtra("color", color);
        notifyIntent.putExtra("color", color);
        intent.putExtra("ambient condition", 10);
        startService(intent);
        startService(notifyIntent);
    }

    public void Remove_overlay (View view) {
        stopService(intent);
        stopService(notifyIntent);
    }

    public void Optimise_screen (View view) {
        //view.setEnabled(false);
        if (android.os.Build.VERSION.SDK_INT < 23){
            startService(cameraIntent);
        } else {
            Log.i("Checking flow", "Asking for camera permission!");
            ActivityCompat.requestPermissions(MainActivity.this, new String[]{Manifest.permission.CAMERA},1);
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, String permissions[], int[] grantResults) {
        switch (requestCode) {
            case 1: {
                if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                    startService(cameraIntent);
                } else {
                    Toast.makeText(MainActivity.this, "Permission denied to use your Camera", Toast.LENGTH_SHORT).show();
                }
                return;
            }

            // other 'case' lines to check for other
            // permissions this app might request
        }
    }

    private int findFrontFacingCamera() {
        int cameraId = -1;
        // Search for the front facing camera
        int numberOfCameras = Camera.getNumberOfCameras();
        for (int i = 0; i < numberOfCameras; i++) {
            Camera.CameraInfo info = new Camera.CameraInfo();
            Camera.getCameraInfo(i, info);
            if (info.facing == Camera.CameraInfo.CAMERA_FACING_FRONT) {
                cameraId = i;
                break;
            }
        }
        Log.i("Checking flow", String.valueOf(cameraId));
        return cameraId;
    }

}

