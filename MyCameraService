package app.ram.overlay;

import android.Manifest;
import android.app.Service;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.hardware.Camera;
import android.os.AsyncTask;
import android.os.IBinder;
import android.support.v4.app.ActivityCompat;
import android.util.Log;

import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Collections;
import java.util.List;

public class MyCameraService extends Service {
    int cameraId;
    Intent intent;
    Intent notifyintent;
    int color;
    int brightness = 0;
    int count = 0;
    int picture_size_width, picture_size_height, preview_size_width, preview_size_height;
    String white_balance, scene_mode;
    Camera camera;
    Bitmap myBitmap;
    public static String MY_ACTION = "MY_ACTION";

    Camera.PictureCallback jpegCallback = new Camera.PictureCallback() {
        public void onPictureTaken(byte[] data, Camera camera1)
        {
            myBitmap = BitmapFactory.decodeByteArray(data,0,data.length);
            Log.i("Checking flow", "bitmap made!");
            camera1.stopPreview();
            camera1.release();
            /*
            try {
                String path = "/storage/sdcard0/sample.jpg";
                FileOutputStream stream = new FileOutputStream(path);
                stream.write(data);
            } catch (IOException e) {
                e.printStackTrace();
            }
            */
            get_brightness();
        }
    };

    public void get_brightness () {
        Log.i("Checking flow", "getting brightness");
        for (int x = 0; x < myBitmap.getWidth(); x++) {
            for(int y = 0; y < myBitmap.getHeight(); y++) {
                int pixel = myBitmap.getPixel(x,y);

                int r = Color.red(pixel);
                int g = Color.green(pixel);
                int b = Color.blue(pixel);

                brightness = brightness + (int) (0.2126*r + 0.7152*g + 0.0722*b);
            }
        }
        brightness = brightness / (myBitmap.getWidth() * myBitmap.getHeight());
        Log.i("Checking flow", "brightness = " + brightness);
        intent = new Intent(this, OverlayService.class);
        notifyintent  = new Intent(this, MyNotifyService.class);
        if (brightness == 0) {
            stopService(intent);
            stopService(notifyintent);
            color = Color.argb(150, 125, 0, 0);
            intent.putExtra("color", color);
            intent.putExtra("ambient condition", 6);
            //sendNotification();
            startService(intent);
            notifyintent.putExtra("color", color);
            startService(notifyintent);
            //set_screen_brightness(1);
        }
        else if (brightness < 10 && brightness > 0) {
            stopService(intent);
            stopService(notifyintent);
            color = Color.argb(100, 100, 0, 0);
            intent.putExtra("color", color);
            intent.putExtra("ambient condition", 1);
            //sendNotification();
            startService(intent);
            notifyintent.putExtra("color", color);
            startService(notifyintent);
            //set_screen_brightness(1);
        }
        else if (brightness > 50 && brightness < 75) {
            //Log.i("Checking flow", "have to figure this out");
            stopService(intent);
            stopService(notifyintent);
            intent.putExtra("ambient condition", 3);
            startService(intent);
            //set_screen_brightness(127);
        }
        else if (brightness >=75 && brightness < 100) {
            stopService(intent);
            stopService(notifyintent);
            intent.putExtra("ambient condition", 4);
            startService(intent);
        }
        else if (brightness >= 100) {
            stopService(intent);
            stopService(notifyintent);
            intent.putExtra("ambient condition", 5);
            startService(intent);
            //set_screen_brightness(255);
        }
        else {
            stopService(intent);
            stopService(notifyintent);
            intent.putExtra("ambient condition", 2);
            startService(intent);
            //set_screen_brightness(1);
        }
        /*
        Intent intent = new Intent();
        intent.setAction(MY_ACTION);
        intent.putExtra("Brightness", brightness);
        sendBroadcast(intent);
        */
        //textView.setText(String.valueOf(brightness));
        Log.i("Checking flow", "Stopping service");
        stopSelf();
    }

    private class MyTask extends AsyncTask<Void, Void, Boolean> {
        @Override
        protected Boolean doInBackground(Void... params) {
            Log.i("Checking flow", "Starting preview");
            camera.startPreview();
            Log.i("Checking flow", "Preview started");
            return true;
        }

        protected void onPostExecute(Boolean dummy) {
            Log.i("Checking flow", "in post execute!");
            // this runs on UI Thread
            if (dummy) {
                camera.takePicture(null,null,jpegCallback);
                Log.i("Checking flow", "left post execute!");
            }
        }
    }

    public MyCameraService() {
    }

    @Override
    public IBinder onBind(Intent intent) {
        // TODO: Return the communication channel to the service.
        throw new UnsupportedOperationException("Not yet implemented");
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        cameraId = intent.getExtras().getInt("cameraID");
        Log.i("Checking flow", "Hi!");
        Log.i("Checking flow", "Got camera_id " + cameraId);
        try{
            camera = Camera.open(cameraId);
            Log.i("Checking flow", "Camera open");
            Camera.Parameters param = camera.getParameters();
            if(count == 0) {
                picture_size_width = find_min_product(param.getSupportedPictureSizes())[0];
                picture_size_height = find_min_product(param.getSupportedPictureSizes())[1];
                white_balance = param.getSupportedWhiteBalance().get(2);
                if (param.getSupportedSceneModes() !=  null)
                    scene_mode = param.getSupportedSceneModes().get(1);
                preview_size_width = find_min_product(param.getSupportedPreviewSizes())[0];
                preview_size_height = find_min_product(param.getSupportedPreviewSizes())[1];
            }
            param.setPictureSize(picture_size_width, picture_size_height);
            param.set("whitebalance", white_balance);
            if (param.getSupportedSceneModes() !=  null)
                param.set("scene-mode", scene_mode);
            param.set("iso-speed", 100);                                            //device specific
            param.setPreviewSize(preview_size_width, preview_size_height);
            camera.setParameters(param);
            count = count + 1;
            Log.i("Checking flow", "Parameters set!   " + param.flatten() );
            MyTask mytask = new MyTask();
            mytask.execute();
            Log.i("Checking flow", "Just before return");
        } catch (Exception e) {
            Log.i("Checking flow", "unable to open camera");
        }

        return START_NOT_STICKY;
    }

    public int[] find_min_product (List<Camera.Size> l) {
        int min = l.get(0).height * l.get(0).width;
        int min_index = 0;
        for (int i = 0; i < l.size(); i++){
            if(l.get(i).width * l.get(i).height < min) {
                min = l.get(i).width * l.get(i).height;
                min_index = i;
            }
        }
        int[] return_array = {l.get(min_index).width, l.get(min_index).height};
        return return_array;
    }
}
